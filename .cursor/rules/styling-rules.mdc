---
description: 
globs: 
alwaysApply: true
---
# Styling Rules for Modern Web Development  

## 1. Use Scalable Units  
- Always use `rem` or `em` instead of `px` for better scalability and accessibility.  
- Use percentages (`%`) for widths and heights when necessary to create fluid layouts.  

## 2. Prefer Flexible Layouts  
- Use **CSS Grid** for complex, two-dimensional layouts.  
- Use **Flexbox** for one-dimensional layouts and component alignment.  
- Avoid using `float` and absolute positioning for layout purposes unless necessary.  

## 3. Color Management with HSL  
- Prefer **HSL** (`hue, saturation, lightness`) for defining colors to improve readability and maintainability.  
- Use CSS variables (`--primary-color: hsl(210, 100%, 50%)`) to maintain consistent color schemes.  
- Ensure sufficient **contrast** for accessibility (`WCAG AA/AAA` standards).  

## 4. Maintain a Responsive Design  
- Use `clamp()`, `min()`, and `max()` for fluid typography and spacing.  
- Utilize media queries (`@media (max-width: 768px)`) for responsive breakpoints.  
- Prefer `aspect-ratio` for maintaining image and element proportions.  

## 5. Optimize for Performance  
- Reduce **unnecessary CSS rules** and **avoid deep selectors** for better performance.  
- Use `will-change` and `contain` properties to optimize rendering performance.  
- Avoid excessive use of `!important`, inline styles, and `@import` (use native `@font-face` instead).  

## 6. Enhance Accessibility  
- Ensure sufficient spacing and touch-friendly elements (`min-height: 44px` for buttons).  
- Use **focus-visible** styles instead of removing focus outlines (`:focus-visible`).  
- Implement dark mode support using `prefers-color-scheme`.  

## 7. Maintain Code Consistency  
- Use a consistent **naming convention** (e.g., BEM, utility-first, or another methodology).  
- Use CSS variables (`--font-size-lg: 1.5rem;`) for maintainability.  
- Organize styles with a modular approach (`base`, `components`, `utilities`).  

## 8. Optimize Animations & Transitions  
- Use `transform: translate()` instead of `top`/`left` for smoother animations.  
- Prefer **GPU-accelerated properties** (`opacity`, `transform`) for better performance.  
- Avoid excessive animations on mobile devices (`@media (prefers-reduced-motion)`).  

## 9. Reduce Unused CSS  
- Use **CSS purge tools** (e.g., PurgeCSS, Tailwindâ€™s tree-shaking) to remove unused styles.  
- Load stylesheets asynchronously (`<link rel="stylesheet" href="styles.css" media="print" onload="this.media='all'">`).  

## 10. Follow Best Practices for Theming  
- Use **CSS variables** (`--primary-color`) instead of hardcoded values.  
- Implement **dark mode** with `prefers-color-scheme: dark`.  
- Keep color palettes and typography consistent across the project.  
