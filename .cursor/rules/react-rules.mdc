---
description: 
globs: 
alwaysApply: false
---
# React Rules for Modern Development  

## 1. Component Structure  
- A React component should be **separated into layout and logic**:  
  - The main component file (e.g., `MyComponent.tsx`) should handle **JSX and layout**.  
  - A custom hook (e.g., `useMyComponent.ts`) should encapsulate **business logic and state management**.  

## 2. Performance Optimization  
- Use **`useMemo`** and **`useCallback`** when necessary to optimize rendering and prevent unnecessary re-renders.  
- Avoid excessive re-renders by **memoizing expensive computations** and **functions in dependency arrays**.  
- Prefer **React.memo** for optimizing functional components that receive props.  

## 3. Project Setup  
- **Use Vite** instead of Create React App (CRA) for faster builds and better performance.  
- Create new React projects using Bun and Vite with:  
  ```sh
  bun create vite app-name --template react-ts
## 4. Package Management
Use Bun instead of npm or yarn for dependency management and faster installs.
Run commands using Bun:
sh
Copy
Edit
bun install        # Install dependencies  
bun run dev        # Start the development server  
bun run build      # Build the project  
bun run test       # Run tests  

## 5. Best Practices for State & Effects
Use useState for local component state and useReducer for complex state logic.

Use useEffect only when necessary and clean up side effects properly (return () => {} in effects).

Prefer React Query, Zustand, or Redux Toolkit for managing global state instead of lifting state up excessively.

## 6. TypeScript Best Practices
Always use TypeScript (.tsx) for better type safety and maintainability.

Define prop types with interfaces:

tsx
Copy
Edit
interface MyComponentProps {
  title: string;
  onClick: () => void;
}
Use React.FC sparingly, preferring explicit return types (: JSX.Element).

## 7. File & Folder Structure
Follow a modular folder structure:

bash
Copy
Edit
src/
├── components/      # Reusable UI components  
├── hooks/           # Custom hooks  
├── pages/           # Page components  
├── store/           # State management (if needed)  
├── styles/          # Global and component-specific styles  
├── assets/          # Images, fonts, etc.  
├── utils/           # Utility functions  

## 8. Code Formatting & Linting
Use ESLint + Prettier to enforce consistent code style.

Ensure strict TypeScript rules for better type safety.

## 9. Styling & UI Frameworks
Prefer Tailwind CSS or CSS modules for styling instead of traditional global styles.

Use ShadCN/UI or Radix UI for accessible components.

## 10. Testing Best Practices
Use Jest + React Testing Library for unit and integration tests.

Prefer Vitest (faster alternative to Jest) when using Vite.

Write testable components with proper dependency injection and mock external dependencies.

vbnet
Copy
Edit
